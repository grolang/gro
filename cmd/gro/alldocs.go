// Copyright 2016 The Gro Authors.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// DO NOT EDIT THIS FILE. GENERATED BY "grot doc".
// After changing the documentation text in source files,
// rerun "grot doc cmd >> filename.go" to regenerate this file.

/*
Command gro provides utilities to complement those in the Go command.

Runs various utilities to complement those in the Go command

Usage:

	gro [action] [flags] [path ...]

The actions are:

	prepare
		generate the .go file/s
	execute
		prepare a single .gro file, then run the main() function
	repl
		start read-eval-print-loop processing
	learn
		start repl in learn mode
	version
		report which version of Gro and Go


Generate the go files

Usage:

	gro prepare [flags] [path ...]

Prepare generates formatted Go programs from Gro scripts.
It uses the same whitespace as gofmt.

Without an explicit path, it processes the standard input and prints the reformatted source to the standard output.
Given a file, it operates on that file; given a directory, it operates on all .gro files in that directory, recursively.
(Files starting with a period are ignored.)
It then prints the generated Go source to the output files as determined by the Gro source.


Generate the go files then run the main func

Usage:

	gro execute [flags] [path ...]

Execute first prepares the Gro scripts, then runs package main function main().
See gro help prepare.


Run the Gro read-eval-print-loop processor

Usage:

	gro repl

Repl runs the Gro read-eval-print-loop processor.

From within the repl, type a valid Gro statement, or:

	显      see the values of all vars
	学      enter learn mode
	出      exit the repl


Give an interactive tutorial on the Gro language and tool

Usage:

	gro learn [tutorial-name]

Learn gives an interactive tutorial on the Gro language and tool.

From within the learn mode, type a valid statement, or:

	后      advance a page
	前      go back a page
	出      exit learn mode

The tutorials available are:
{{range .}}
	{{.Name | printf "%-11s"}} {{.Short}}{{end}}


Print Gro version

Usage:

	gro version

Version prints the Gro version.


Flags used in Gro

The flags common to both prepare and execute are:

	-cpuprofile filename
		Write cpu profile to the specified file.
	-e
		Print all (including spurious) errors.
	-x
		Print steps as they are executed.

The flag used by doc is:
	-o
		Print the command or tutorial doco to this file.


Create various forms of documentation from the Gro source

Usage:

	gro doc [type] [name]

Doc creates various types of documentation from the Gro source.

The types are:

	cmd      prints documentation for all available gro sub-commands in
	         a single go file.

	tut      prints tutorial "name" in the form of a doc.go file.
	         If no "name", prints all available tutorials in a single file.

	test     test runs all gro code in the tutorial "name".
	         If no "name", test runs code in all available tutorials.


*/
package main
